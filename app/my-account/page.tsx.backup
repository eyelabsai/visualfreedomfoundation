'use client'

import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import Header from '@/components/Header'
import Footer from '@/components/Footer'
import { useAuth } from '@/contexts/AuthContext'

export default function MyAccountPage() {
  const { user } = useAuth()
  const [isLoading, setIsLoading] = useState(false)
  const [isEditing, setIsEditing] = useState(false)
  const [activeTab, setActiveTab] = useState<'account' | 'patient-log'>('account')
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    city: '',
    state: '',
    country: ''
  })
  const [userData, setUserData] = useState<any>(null)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')

  // Patient logging state
  const [showPatientForm, setShowPatientForm] = useState(false)
  const [patients, setPatients] = useState<any[]>([])
  const [patientFormData, setPatientFormData] = useState({
    patientName: '',
    dateOfBirth: '',
    procedureType: '',
    procedureLocation: '',
    procedureDate: '',
    notes: ''
  })
  const [patientLoading, setPatientLoading] = useState(false)
  const [patientError, setPatientError] = useState('')
  const [patientSuccess, setPatientSuccess] = useState('')
  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null)

  // Calculate age from date of birth
  const calculateAge = (dateOfBirth: string) => {
    if (!dateOfBirth) return ''
    const today = new Date()
    const birthDate = new Date(dateOfBirth)
    let age = today.getFullYear() - birthDate.getFullYear()
    const monthDiff = today.getMonth() - birthDate.getMonth()
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--
    }
    return age
  }

  // Load user data on component mount
  useEffect(() => {
    const loadUserData = async () => {
      if (user) {
        try {
          const { getUserData } = await import('@/lib/firebase')
          const data = await getUserData(user.uid)
          
          if (data) {
            setUserData(data)
            setFormData({
              firstName: data.firstName || '',
              lastName: data.lastName || '',
              email: data.email || user.email || '',
              city: data.location?.city || '',
              state: data.location?.state || '',
              country: data.location?.country || ''
            })
          } else {
            // If no user data exists, use email from auth
            setFormData({
              firstName: '',
              lastName: '',
              email: user.email || '',
              city: '',
              state: '',
              country: ''
            })
          }
        } catch (error) {
          console.error('Error loading user data:', error)
        }
      }
    }

    loadUserData()
  }, [user])

  // Load patients for surgeons
  useEffect(() => {
    const loadPatients = async () => {
      if (user && userData?.role === 'surgeon') {
        try {
          const { getPatientsBySurgeon } = await import('@/lib/firebase')
          const patientData = await getPatientsBySurgeon(user.uid)
          setPatients(patientData || [])
        } catch (error) {
          console.error('Error loading patients:', error)
        }
      }
    }

    if (userData) {
      loadPatients()
    }
  }, [user, userData])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handlePatientFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target
    setPatientFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleUpdateProfile = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')
    setSuccess('')

    try {
      const { updateUserData, createUserData, updateSurgeonLocation } = await import('@/lib/firebase')
      const { geocodeAddress } = await import('@/lib/geocoding')
      
      // Prepare basic profile data
      const dataToSave = {
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        updatedAt: new Date().toISOString()
      }

      // If user is a surgeon and has location data, handle location update
      if (userData?.role === 'surgeon' && (formData.city || formData.state || formData.country)) {
        try {
          // Geocode the address to get coordinates
          const coordinates = await geocodeAddress(formData.city, formData.state, formData.country)
          
          const locationData = {
            city: formData.city || '',
            state: formData.state || '',
            country: formData.country || '',
            coordinates: coordinates
          }
          
          // Update location separately for surgeons
          await updateSurgeonLocation(user?.uid, locationData)
        } catch (locationError) {
          console.error('Location update error:', locationError)
          // Continue with profile update even if location fails
        }
      }

      if (userData) {
        // Update existing user data
        await updateUserData(user?.uid, dataToSave)
      } else {
        // Create new user data with createdAt
        await createUserData(user?.uid, {
          ...dataToSave,
          createdAt: new Date().toISOString(),
          lastLogin: new Date().toISOString()
        })
      }
      
      // Create success message
      let successMessage = 'Profile updated successfully!'
      if (userData?.role === 'surgeon' && (formData.city || formData.state || formData.country)) {
        successMessage += ' Your location has been updated and will appear on the surgeon map.'
      }
      setSuccess(successMessage)
      setIsEditing(false)
      
      // Refresh user data
      const { getUserData } = await import('@/lib/firebase')
      const updatedData = await getUserData(user?.uid)
      setUserData(updatedData)
    } catch (error: any) {
      console.error('Update profile error:', error)
      setError('Failed to update profile. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleAddPatient = async (e: React.FormEvent) => {
    e.preventDefault()
    setPatientLoading(true)
    setPatientError('')
    setPatientSuccess('')

    try {
      const { addPatientRecord } = await import('@/lib/firebase')
      
      const patientData = {
        ...patientFormData,
        surgeonId: user?.uid,
        surgeonName: `${userData?.firstName || ''} ${userData?.lastName || ''}`.trim(),
        age: calculateAge(patientFormData.dateOfBirth),
        createdAt: new Date().toISOString()
      }

      await addPatientRecord(patientData)
      
      setPatientSuccess('Patient record added successfully!')
      setShowPatientForm(false)
      
      // Reset form
      setPatientFormData({
        patientName: '',
        dateOfBirth: '',
        procedureType: '',
        procedureLocation: '',
        procedureDate: '',
        notes: ''
      })
      
      // Reload patients
      const { getPatientsBySurgeon } = await import('@/lib/firebase')
      const updatedPatients = await getPatientsBySurgeon(user?.uid)
      setPatients(updatedPatients || [])
      
    } catch (error: any) {
      console.error('Add patient error:', error)
      setPatientError('Failed to add patient record. Please try again.')
    } finally {
      setPatientLoading(false)
    }
  }

  const handleDeletePatient = async (patientId: string, patientName: string) => {
    if (deleteConfirm !== patientId) {
      setDeleteConfirm(patientId)
      return
    }

    setPatientLoading(true)
    setPatientError('')
    setPatientSuccess('')

    try {
      const { deletePatientRecord } = await import('@/lib/firebase')
      await deletePatientRecord(patientId)
      
      setPatientSuccess(`Patient record for ${patientName} deleted successfully!`)
      setDeleteConfirm(null)
      
      // Reload patients
      const { getPatientsBySurgeon } = await import('@/lib/firebase')
      const updatedPatients = await getPatientsBySurgeon(user?.uid)
      setPatients(updatedPatients || [])
      
    } catch (error: any) {
      console.error('Delete patient error:', error)
      setPatientError('Failed to delete patient record. Please try again.')
    } finally {
      setPatientLoading(false)
    }
  }

  const handleLogout = async () => {
    setIsLoading(true)
    
    try {
      const { authFunctions } = await import('@/lib/firebase')
      await authFunctions.signOut()
      
      // Redirect to home page
      window.location.href = '/'
    } catch (error) {
      console.error('Logout error:', error)
    } finally {
      setIsLoading(false)
    }
  }

  // Redirect if not authenticated
  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <main className="flex-1 flex items-center justify-center py-12">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 mb-4">Please Sign In</h1>
            <p className="text-gray-600 mb-4">You need to be signed in to access your account.</p>
            <Link href="/login" className="btn-primary">
              Sign In
            </Link>
          </div>
        </main>
        <Footer />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <main className="flex-1 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="bg-white shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <div className="sm:flex sm:items-center sm:justify-between">
                <div>
                  <h1 className="text-2xl font-bold text-gray-900">My Account</h1>
                  <p className="mt-1 text-sm text-gray-600">
                    Manage your account settings and preferences
                    {userData?.role === 'surgeon' && ' • Patient Logging Available'}
                  </p>
                </div>
                {userData?.role === 'surgeon' && (
                  <div className="mt-4 sm:mt-0">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      👨‍⚕️ Surgeon
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Tab Navigation */}
          <div className="mt-8">
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex space-x-8">
                <button
                  onClick={() => setActiveTab('account')}
                  className={`py-2 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'account'
                      ? 'border-[#33848C] text-[#33848C]'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Account
                </button>
                {userData?.role === 'surgeon' && (
                  <button
                    onClick={() => setActiveTab('patient-log')}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeTab === 'patient-log'
                        ? 'border-[#33848C] text-[#33848C]'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    Patient Log
                  </button>
                )}
              </nav>
            </div>
          </div>

          {/* Tab Content */}
          {activeTab === 'account' && (
            <div className="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-3">
              <div className="lg:col-span-2">
                <div className="bg-white shadow rounded-lg">
                  <div className="px-4 py-5 sm:p-6">
                    <div className="sm:flex sm:items-center sm:justify-between">
                      <div>
                        <h2 className="text-xl font-semibold text-gray-900">Profile Information</h2>
                        <p className="mt-1 text-sm text-gray-600">
                          Update your personal information
                          {userData?.role === 'surgeon' && (
                            <span className="block mt-1 text-blue-600">
                              💡 Surgeons: Add your location to appear on the surgeon map
                            </span>
                          )}
                        </p>
                      </div>
                      {!isEditing && (
                        <button
                          onClick={() => setIsEditing(true)}
                          className="btn-secondary"
                        >
                          Edit Profile
                        </button>
                      )}
                    </div>

                    {error && (
                      <div className="mt-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                        {error}
                      </div>
                    )}

                                         {success && (
                       <div className="mt-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded">
                        <div className="flex">
                          <div className="flex-shrink-0">
                            <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                            </svg>
                          </div>
                          <div className="ml-3">
                            <p className="text-sm text-green-700">{success}</p>
                            {userData?.role === 'surgeon' && success.includes('location') && (
                              <div className="mt-2">
                                <Link 
                                  href="/surgeon-map" 
                                  className="text-sm text-green-600 hover:text-green-500 underline"
                                >
                                  View yourself on the surgeon map →
                                </Link>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    )}

                    <div className="mt-6">
                    {isEditing ? (
                      <form onSubmit={handleUpdateProfile} className="space-y-6">
                        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
                          <div>
                            <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">
                              First Name
                            </label>
                            <input
                              id="firstName"
                              name="firstName"
                              type="text"
                              required
                              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-vff-blue focus:border-vff-blue"
                              value={formData.firstName}
                              onChange={handleChange}
                            />
                          </div>
                          <div>
                            <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">
                              Last Name
                            </label>
                            <input
                              id="lastName"
                              name="lastName"
                              type="text"
                              required
                              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-vff-blue focus:border-vff-blue"
                              value={formData.lastName}
                              onChange={handleChange}
                            />
                          </div>
                        </div>
                        
                        <div>
                          <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                            Email Address
                          </label>
                          <input
                            id="email"
                            name="email"
                            type="email"
                            required
                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-vff-blue focus:border-vff-blue"
                            value={formData.email}
                            onChange={handleChange}
                          />
                        </div>
                        
                        {/* Location Fields */}
                        {userData?.role === 'surgeon' && (
                          <div className="bg-blue-50 border border-blue-200 rounded-md p-4 mb-4">
                            <div className="flex">
                              <div className="flex-shrink-0">
                                <svg className="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                                </svg>
                              </div>
                              <div className="ml-3">
                                <p className="text-sm text-blue-700">
                                  <strong>Location Update:</strong> Adding your location will make you visible on the surgeon map. 
                                  Your location will be automatically geocoded to show your practice on the map.
                                </p>
                              </div>
                            </div>
                          </div>
                        )}
                        
                        <div className="grid grid-cols-1 gap-6 sm:grid-cols-3">
                          <div>
                            <label htmlFor="city" className="block text-sm font-medium text-gray-700">
                              City
                            </label>
                            <input
                              id="city"
                              name="city"
                              type="text"
                              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-vff-blue focus:border-vff-blue"
                              value={formData.city}
                              onChange={handleChange}
                              placeholder="Enter your city"
                            />
                          </div>
                          <div>
                            <label htmlFor="state" className="block text-sm font-medium text-gray-700">
                              State/Province
                            </label>
                            <input
                              id="state"
                              name="state"
                              type="text"
                              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-vff-blue focus:border-vff-blue"
                              value={formData.state}
                              onChange={handleChange}
                              placeholder="Enter your state/province"
                            />
                          </div>
                          <div>
                            <label htmlFor="country" className="block text-sm font-medium text-gray-700">
                              Country
                            </label>
                            <input
                              id="country"
                              name="country"
                              type="text"
                              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-vff-blue focus:border-vff-blue"
                              value={formData.country}
                              onChange={handleChange}
                              placeholder="Enter your country"
                            />
                          </div>
                        </div>
                        
                        <div className="flex space-x-3 pt-4">
                          <button
                            type="submit"
                            disabled={isLoading}
                            className="btn-primary disabled:opacity-50"
                          >
                            {isLoading ? 'Saving...' : 'Save Changes'}
                          </button>
                          <button
                            type="button"
                            onClick={() => {
                              setIsEditing(false)
                              setError('')
                              setSuccess('')
                              // Reset form data
                              if (userData) {
                                setFormData({
                                  firstName: userData.firstName || '',
                                  lastName: userData.lastName || '',
                                  email: userData.email || user.email || '',
                                  city: userData.location?.city || '',
                                  state: userData.location?.state || '',
                                  country: userData.location?.country || ''
                                })
                              }
                            }}
                            className="btn-secondary"
                          >
                            Cancel
                          </button>
                        </div>
                      </form>
                    ) : (
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700">First Name</label>
                          <p className="mt-1 text-sm text-gray-900">{formData.firstName || 'Not provided'}</p>
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700">Last Name</label>
                          <p className="mt-1 text-sm text-gray-900">{formData.lastName || 'Not provided'}</p>
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700">Email Address</label>
                          <p className="mt-1 text-sm text-gray-900">{formData.email}</p>
                        </div>
                        
                        {userData?.organization && (
                          <div>
                            <label className="block text-sm font-medium text-gray-700">Organization</label>
                            <p className="mt-1 text-sm text-gray-900">{userData.organization}</p>
                          </div>
                        )}
                        
                        {userData?.specialization && (
                          <div>
                            <label className="block text-sm font-medium text-gray-700">Specialization</label>
                            <p className="mt-1 text-sm text-gray-900">{userData.specialization}</p>
                          </div>
                        )}
                        
                        {/* Location Display */}
                        {(userData?.location?.city || userData?.location?.state || userData?.location?.country) && (
                          <div>
                            <label className="block text-sm font-medium text-gray-700">Location</label>
                            <p className="mt-1 text-sm text-gray-900">
                              {[userData.location.city, userData.location.state, userData.location.country]
                                .filter(Boolean)
                                .join(', ')}
                            </p>
                          </div>
                        )}
                        
                        {userData?.createdAt && (
                          <div>
                            <label className="block text-sm font-medium text-gray-700">Member Since</label>
                            <p className="mt-1 text-sm text-gray-900">{new Date(userData.createdAt).toLocaleDateString()}</p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>


          </div>
        )}

        {/* Patient Log Tab Content */}
        {activeTab === 'patient-log' && userData?.role === 'surgeon' && (
          <div className="mt-8">
            <div className="bg-white shadow rounded-lg">
              <div className="px-4 py-5 sm:p-6">
                <div className="sm:flex sm:items-center sm:justify-between">
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">Patient Records</h2>
                    <p className="mt-1 text-sm text-gray-600">Log and manage your surgical procedures</p>
                  </div>
                  <button
                    onClick={() => setShowPatientForm(true)}
                    className="btn-primary"
                  >
                    + New Patient
                  </button>
                </div>

                {patientError && (
                  <div className="mt-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                    {patientError}
                  </div>
                )}

                {patientSuccess && (
                  <div className="mt-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded">
                    {patientSuccess}
                  </div>
                )}

                {/* New Patient Form */}
                {showPatientForm && (
                  <div className="mt-6 border-t pt-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Add New Patient Record</h3>
                    <form onSubmit={handleAddPatient} className="space-y-4">
                      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                        <div>
                          <label htmlFor="patientName" className="block text-sm font-medium text-gray-700">
                            Patient Name *
                          </label>
                          <input
                            id="patientName"
                            name="patientName"
                            type="text"
                            required
                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={patientFormData.patientName}
                            onChange={handlePatientFormChange}
                          />
                        </div>
                        <div>
                          <label htmlFor="dateOfBirth" className="block text-sm font-medium text-gray-700">
                            Date of Birth *
                          </label>
                          <input
                            id="dateOfBirth"
                            name="dateOfBirth"
                            type="date"
                            required
                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={patientFormData.dateOfBirth}
                            onChange={handlePatientFormChange}
                          />
                          {patientFormData.dateOfBirth && (
                            <p className="mt-1 text-sm text-gray-500">Age: {calculateAge(patientFormData.dateOfBirth)} years</p>
                          )}
                        </div>
                      </div>

                      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                        <div>
                          <label htmlFor="procedureType" className="block text-sm font-medium text-gray-700">
                            Procedure Type *
                          </label>
                          <select
                            id="procedureType"
                            name="procedureType"
                            required
                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={patientFormData.procedureType}
                            onChange={handlePatientFormChange}
                          >
                            <option value="">Select Procedure</option>
                            <option value="LASIK">LASIK</option>
                            <option value="PRK">PRK</option>
                            <option value="SMILE">SMILE</option>
                            <option value="Cataract Surgery">Cataract Surgery</option>
                            <option value="Retinal Surgery">Retinal Surgery</option>
                            <option value="Corneal Transplant">Corneal Transplant</option>
                            <option value="Glaucoma Surgery">Glaucoma Surgery</option>
                            <option value="Other">Other</option>
                          </select>
                        </div>
                        <div>
                          <label htmlFor="procedureLocation" className="block text-sm font-medium text-gray-700">
                            Procedure Location *
                          </label>
                          <input
                            id="procedureLocation"
                            name="procedureLocation"
                            type="text"
                            required
                            placeholder="Hospital/Clinic Name"
                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            value={patientFormData.procedureLocation}
                            onChange={handlePatientFormChange}
                          />
                        </div>
                      </div>

                      <div>
                        <label htmlFor="procedureDate" className="block text-sm font-medium text-gray-700">
                          Procedure Date *
                        </label>
                        <input
                          id="procedureDate"
                          name="procedureDate"
                          type="date"
                          required
                          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                          value={patientFormData.procedureDate}
                          onChange={handlePatientFormChange}
                        />
                      </div>

                      <div>
                        <label htmlFor="notes" className="block text-sm font-medium text-gray-700">
                          Notes (Optional)
                        </label>
                        <textarea
                          id="notes"
                          name="notes"
                          rows={3}
                          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Additional notes about the procedure..."
                          value={patientFormData.notes}
                          onChange={handlePatientFormChange}
                        />
                      </div>

                      <div className="flex space-x-3 pt-4">
                        <button
                          type="submit"
                          disabled={patientLoading}
                          className="btn-primary disabled:opacity-50"
                        >
                          {patientLoading ? 'Adding...' : 'Add Patient Record'}
                        </button>
                        <button
                          type="button"
                          onClick={() => {
                            setShowPatientForm(false)
                            setPatientError('')
                            setPatientSuccess('')
                          }}
                          className="btn-secondary"
                        >
                          Cancel
                        </button>
                      </div>
                    </form>
                  </div>
                )}

                {/* Patient List */}
                <div className="mt-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Recent Patients ({patients.length})
                  </h3>
                  {patients.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
                              Patient
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-16">
                              Age
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
                              Procedure
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
                              Date
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
                              Location
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-16">
                              Actions
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {patients.slice(0, 5).map((patient, index) => (
                            <tr key={index}>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                {patient.patientName}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {patient.age}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {patient.procedureType}
                              </td>
                              <td className="border border-gray-300 px-4 py-4 text-sm text-gray-500">
                                {new Date(patient.procedureDate).toLocaleDateString()}
                              </td>
                              <td className="border border-gray-300 px-4 py-4 text-sm text-gray-500">
                                {patient.procedureLocation}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 bg-gray-50 text-center w-16">
                                <div className="space-y-2">
                                  {deleteConfirm === patient.id ? (
                                    <>
                                      <button
                                        onClick={() => handleDeletePatient(patient.id, patient.patientName)}
                                        disabled={patientLoading}
                                        className="w-8 h-8 bg-red-50 hover:bg-red-100 text-red-700 hover:text-red-800 rounded-md border border-red-200 hover:border-red-300 transition-colors duration-200 disabled:opacity-50 flex items-center justify-center text-xs"
                                      >
                                        {patientLoading ? '⋯' : '✓'}
                                      </button>
                                      <button
                                        onClick={() => setDeleteConfirm(null)}
                                        disabled={patientLoading}
                                        className="w-8 h-8 bg-gray-50 hover:bg-gray-100 text-gray-600 hover:text-gray-800 rounded-md border border-gray-200 hover:border-gray-300 transition-colors duration-200 disabled:opacity-50 flex items-center justify-center text-xs"
                                      >
                                        ✕
                                      </button>
                                    </>
                                  ) : (
                                    <button
                                      onClick={() => handleDeletePatient(patient.id, patient.patientName)}
                                      className="w-8 h-8 bg-gray-100 hover:bg-gray-200 text-gray-700 hover:text-gray-900 rounded-md border border-gray-300 hover:border-gray-400 transition-colors duration-200 flex items-center justify-center"
                                      title="Delete patient record"
                                    >
                                      🗑️
                                    </button>
                                  )}
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                      {patients.length > 5 && (
                        <div className="px-6 py-3 bg-gray-50 text-center">
                          <p className="text-sm text-gray-500">
                            Showing 5 of {patients.length} patients
                          </p>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <p className="text-gray-500">No patient records yet. Click "New Patient" to add your first record.</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Sidebar - Always visible */}
        <div className="mt-8">
          <div className="bg-gray-50 rounded-lg p-6">
              <div className="bg-gray-50 rounded-lg p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
                
                <div className="space-y-3">
                  {userData?.role === 'surgeon' && (
                    <Link 
                      href="/surgeon-map" 
                      className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
                    >
                      View Surgeon Map
                    </Link>
                  )}
                  
                  <Link 
                    href="/lost-password" 
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
                  >
                    Change Password
                  </Link>
                  
                  <button 
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
                    disabled
                  >
                    Notification Settings (Coming Soon)
                  </button>
                  
                  <button 
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
                    disabled
                  >
                    Privacy Settings (Coming Soon)
                  </button>
                </div>
                
                <div className="mt-6 pt-6 border-t border-gray-200">
                  <button
                    onClick={handleLogout}
                    disabled={isLoading}
                    className="w-full btn-secondary disabled:opacity-50"
                  >
                    {isLoading ? 'Signing out...' : 'Sign Out'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      
      <Footer />
    </div>
  )
}